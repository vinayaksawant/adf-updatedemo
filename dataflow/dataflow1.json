{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InputDataSet_RawPatients",
						"type": "DatasetReference"
					},
					"name": "InputRawData"
				},
				{
					"dataset": {
						"referenceName": "PriorDataCosmos",
						"type": "DatasetReference"
					},
					"name": "PriorCosmosLoadedData"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "AddDocumentKey"
				},
				{
					"name": "doesnotexists"
				},
				{
					"name": "inserttruecolumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BeneID as string,",
				"          ClaimID as string,",
				"          ClaimStartDt as string,",
				"          ClaimEndDt as string,",
				"          Provider as string,",
				"          InscClaimAmtReimbursed as string,",
				"          AttendingPhysician as string,",
				"          OperatingPhysician as string,",
				"          OtherPhysician as string,",
				"          AdmissionDt as string,",
				"          ClmAdmitDiagnosisCode as string,",
				"          DeductibleAmtPaid as string,",
				"          DischargeDt as string,",
				"          DiagnosisGroupCode as string,",
				"          ClmDiagnosisCode_1 as string,",
				"          ClmDiagnosisCode_2 as string,",
				"          ClmDiagnosisCode_3 as string,",
				"          ClmDiagnosisCode_4 as string,",
				"          ClmDiagnosisCode_5 as string,",
				"          ClmDiagnosisCode_6 as string,",
				"          ClmDiagnosisCode_7 as string,",
				"          ClmDiagnosisCode_8 as string,",
				"          ClmDiagnosisCode_9 as string,",
				"          ClmDiagnosisCode_10 as string,",
				"          ClmProcedureCode_1 as string,",
				"          ClmProcedureCode_2 as string,",
				"          ClmProcedureCode_3 as string,",
				"          ClmProcedureCode_4 as string,",
				"          ClmProcedureCode_5 as string,",
				"          ClmProcedureCode_6 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     moveFiles: ['/input','processed']) ~> InputRawData",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> PriorCosmosLoadedData",
				"InputRawData derive(DocumentKey = concat(BeneID, ClaimID)) ~> AddDocumentKey",
				"AddDocumentKey, PriorCosmosLoadedData exists(DocumentKey == id,",
				"     negate:true,",
				"     broadcast: 'auto')~> doesnotexists",
				"doesnotexists derive(insertcolumn = true()) ~> inserttruecolumn"
			]
		}
	}
}